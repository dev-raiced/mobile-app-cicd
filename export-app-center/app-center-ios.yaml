variables:
  MOBILECENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  MOBILECENTER_BRANCH: development
  MOBILECENTER_BUILD_ID: $(Build.BuildNumber)
  MOBILECENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  MOBILECENTER_TRIGGER: manual
  APPCENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  APPCENTER_BRANCH: development
  APPCENTER_BUILD_ID: $(Build.BuildNumber)
  APPCENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  APPCENTER_TRIGGER: manual
  MOBILECENTER_REACTNATIVE_PACKAGE: package.json
  APPCENTER_REACTNATIVE_PACKAGE: package.json
  TestSDK: iphonesimulator
  P12Filename: Certificates.p12
  MobileProvisionFilename: <your-mobile-provision-filename>
  P12SecureFileId: <your-certificate-uuid>
  MobileProvisionSecureFileId: <your-mobile-provision-uuid>
  AppExtensionProvisionSecureFiles: '[]'
  MobileProvision: <your-mobile-provision-uuid>
  MOBILECENTER_XCODE_PROJECT: <your-xcode-workspace>
  MOBILECENTER_XCODE_SCHEME: <your-xcode-scheme>
  APPCENTER_XCODE_PROJECT: <your-xcode-workspace>
  APPCENTER_XCODE_WORKSPACE: <your-xcode-workspace>
  APPCENTER_XCODE_SCHEME: <your-xcode-scheme>
  SONOMA_API_SERVER: 'https://api.appcenter.ms'
  SONOMA_API_VERSION: v0.1
  VSMobileCenterUpload.ContinueIfSymbolsNotFound: 'true'
  destinationSubtype: apple
  sonoma.tags: 'javascript,xcode,signed,distribution'
  name: $(Build.BuildId)
resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/development
jobs:
  - job: Phase_1
    displayName: Build
    cancelTimeoutInMinutes: 0
    pool:
      name: Azure Pipelines
      vmImage: macOS-14
    steps:
      - checkout: self
        clean: true
        submodules: recursive
        lfs: true
      - task: PowerShell@2
        displayName: Install build scripts
        continueOnError: true
        inputs:
          targetType: inline
          scriptName: ''
          script: >-
            Set-Location -Path '$(Agent.HomeDirectory)'
            Invoke-WebRequest -Uri
            'https://appcenterbuildassets.azureedge.net/buildscripts/appcenter-build-assets-latest.zip'
            -OutFile 'appcenter-build-assets-latest.zip'
            if (Test-Path ./scripts) { Remove-Item -Path ./scripts -Force
            -Recurse }
            New-Item -ItemType directory -Path 'scripts' | Out-Null
            unzip -q -d 'scripts' 'appcenter-build-assets-latest.zip'
            Invoke-Expression 'bash ./scripts/init.sh'
          failOnStderr: true
      - task: UseNode@1
        inputs:
          version: 18.x
      - task: CmdLine@1
        displayName: yarn/npm install
        inputs:
          filename: sh
          arguments: >-
            -c "if [ -f yarn.lock ]; then { yarn install
            --network-timeout=600000 && yarn list --depth=0; } else npm install;
            fi"
      - task: ShellScript@2
        displayName: Pre Build Script
        inputs:
          scriptPath: appcenter-pre-build.sh
      - task: CmdLine@2
        displayName: Generate source map
        inputs:
          script: >-
            #!/bin/sh
            INDEX_FILE="index.ios.js"
            if [ -f "index.js" ]; then
              INDEX_FILE="index.js"
            fi
            echo "Found $INDEX_FILE for ReactNative index."
            node --max_old_space_size=8192
            node_modules/react-native/local-cli/cli.js bundle --entry-file
            $INDEX_FILE --platform ios --dev false --reset-cache --bundle-output
            dummy-sourcemap-main.jsbundle --sourcemap-output index.ios.map
          failOnStandardError: false
      - task: CmdLine@1
        displayName: Copy source map file to staging
        inputs:
          filename: sh
          arguments: >-
            -c "mkdir -p $(build.artifactstagingdirectory)/symbols && cp
            index.ios.map $(build.artifactstagingdirectory)/symbols/"
          failOnStandardError: true
      - task: ShellScript@2
        displayName: Tag build
        inputs:
          scriptPath: $(Agent.HomeDirectory)/scripts/emit-tags.sh
          args: $(sonoma.tags)
      - task: CmdLine@1
        displayName: Set Xcode path
        inputs:
          filename: /bin/bash
          arguments: >-
            -c "sudo xcode-select --switch
            /Applications/Xcode_15.2.app/Contents/Developer"
      - task: InstallAppleCertificate@2
        displayName: Install Apple certificate
        inputs:
          certSecureFile: <your-certificate-uuid>
          certPwd: $(CERTFICATE_PASSWORD)
      - task: InstallAppleProvisioningProfile@0
        displayName: Install Apple provisioning profile
        inputs:
          provProfileSecureFile: <your-provisioning-profile-uuid>
      - task: CocoaPods@0
        displayName: Pod install
        inputs:
          cwd: ios
          forceRepoUpdate: true
      - task: Bash@3
        displayName: Determine project file path
        inputs:
          filePath: $(Agent.HomeDirectory)/scripts/detect-autogenerated-workspace.sh
          arguments: ios YourApp
          workingDirectory: $(Build.SourcesDirectory)
      - task: ShellScript@2
        displayName: Determine signing style and pods update
        inputs:
          scriptPath: >-
            $(Agent.HomeDirectory)/scripts/determine-signing-style-and-pods-update.sh
          disableAutoCwd: true
          cwd: $(Build.SourcesDirectory)
      - task: CmdLine@1
        displayName: Set Bundle version
        inputs:
          filename: /usr/bin/find
          arguments: >-
            . -name "*Info.plist" -exec /usr/libexec/PlistBuddy -c "Set
            :CFBundleVersion $(Build.BuildNumber)" {} ;
      - task: CmdLine@1
        displayName: Update Xcode build settings
        continueOnError: true
        inputs:
          filename: node
          arguments: >-
            $(Agent.HomeDirectory)/scripts/build-xcproject-analyzer/node_modules/@build/xcproject-analyzer-script/script/bin.js
            --app-id=<your-app-id>
            --app-insights-key="$(AppInsightsKey)"
            --xc-workspace-path="$(APPCENTER_XCODE_WORKSPACE)"
            --scheme="YourApp" --code-sign-style="$(SIGNING_OPTION)"
            --app-provisioning-profile-uuid=<your-provisioning-profile-uuid>
            --code-sign-identity="$(APPLE_CERTIFICATE_SIGNING_IDENTITY)"
            --development-team=<your-dev-team>
            --app-bundle-identifier=<your-app-bundle>
          workingFolder: $(Build.SourcesDirectory)
      - task: Xcode@4
        displayName: Xcode build (signed)
        inputs:
          actions: clean
          configuration: ''
          xcWorkspacePath: $(APPCENTER_XCODE_PROJECT)
          scheme: YourApp
          xcodeDeveloperDir: /Applications/Xcode_15.2.app/Contents/Developer
          packageApp: true
          archivePath: $(agent.builddirectory)/output/build/archive
          exportPath: $(agent.builddirectory)/output/build/export
          signingOption: $(SIGNING_OPTION)
          outputPattern: $(agent.builddirectory)/output/build
      - task: CopyFiles@2
        displayName: Copy build files to staging
        inputs:
          SourceFolder: $(agent.builddirectory)/output/build/export
          Contents: '**/*.ipa'
          TargetFolder: $(build.artifactstagingdirectory)/build
          OverWrite: true
          flattenFolders: true
      - task: CopyFiles@2
        displayName: Copy symbol files to staging
        inputs:
          SourceFolder: >-
            $(agent.builddirectory)/output/build/archive/YourApp.xcarchive/dSYMs
          Contents: '**/*.dSYM/**'
          TargetFolder: $(build.artifactstagingdirectory)/symbols
          OverWrite: true
      - task: PublishBuildArtifacts@1
        displayName: Publish build
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/build
          ArtifactName: build
          TargetPath: \\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)
      - task: PublishBuildArtifacts@1
        displayName: Publish symbols
        continueOnError: true
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/symbols
          ArtifactName: symbols
          TargetPath: \\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)
      - task: AppCenterDistribute@3
        displayName: Create distribution
        condition: 'and(succeeded(), ne(variables[''Build.Reason''], ''pullRequest''))'
        inputs:
          serverEndpoint: <your-server-endpoint>
          appSlug: <your-app-slug>
          destinationType: store
          destinationStoreId: <your-store-id>
          isSilent: false
          releaseNotesInput: $(lastCommitMessage)
          dsymPath: $(build.artifactstagingdirectory)/symbols
          app: $(build.artifactstagingdirectory)/build/**/*.ipa
