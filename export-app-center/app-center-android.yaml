variables:
  system.debug: 'false'
  lastCommitMessage: 'attempt android '
  pr.check.id: ''
  pr.status.id: ''
  user-defined.JAVA_HOME: $(JAVA_HOME_17_X64)
  user-defined.HTTP_AUTH: 'true'
  user-defined.HOST: <your-host>
  user-defined.HTTP_AUTH_USER: null
  user-defined.HTTP_AUTH_PASSWORD: null
  MOBILECENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  MOBILECENTER_BRANCH: development
  MOBILECENTER_BUILD_ID: $(Build.BuildNumber)
  MOBILECENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  MOBILECENTER_TRIGGER: manual
  APPCENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  APPCENTER_BRANCH: development
  APPCENTER_BUILD_ID: $(Build.BuildNumber)
  APPCENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  APPCENTER_TRIGGER: manual
  buildScripts.toolset: '{"package.json":{"preBuild":"appcenter-pre-build.sh"}}'
  javaScriptRunTests: 'false'
  MOBILECENTER_REACTNATIVE_PACKAGE: package.json
  APPCENTER_REACTNATIVE_PACKAGE: package.json
  moduleName: app
  buildVariant: release
  isRoot: 'false'
  runTests: 'false'
  runLint: 'false'
  keystorePassword: null
  keyAlias: null
  keyPassword: null
  keystoreFilename: <your-keystoreFilename>
  keystoreSecureFileId: <your-keystoreSecureFileId>
  keystoreSecureFilename: <your-keystoreSecureFilename>
  keystoreEncoded: null
  automaticSigning: 'false'
  buildBundle: 'true'
  MOBILECENTER_ANDROID_MODULE: app
  MOBILECENTER_ANDROID_VARIANT: release
  APPCENTER_ANDROID_MODULE: app
  APPCENTER_ANDROID_VARIANT: release
  SONOMA_API_SERVER: 'https://api.appcenter.ms'
  SONOMA_API_VERSION: v0.1
  VSMobileCenterUpload.ContinueIfSymbolsNotFound: 'true'
  destinationSubtype: googleplay
  sonoma.tags: 'javascript,android,signed,android-app-bundle,distribution'
name: $(BuildID)
resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/development
jobs:
  - job: Phase_1
    displayName: Build
    cancelTimeoutInMinutes: 0
    pool:
      name: Azure Pipelines
      vmImage: ubuntu-latest
    steps:
      - checkout: self
        clean: true
        submodules: recursive
        lfs: true
      - task: PowerShell@2
        displayName: Install build scripts
        continueOnError: true
        inputs:
          targetType: inline
          scriptName: ''
          script: >-
            Set-Location -Path '$(Agent.HomeDirectory)'
            Invoke-WebRequest -Uri
            'https://appcenterbuildassets.azureedge.net/buildscripts/appcenter-build-assets-latest.zip'
            -OutFile 'appcenter-build-assets-latest.zip'
            if (Test-Path ./scripts) { Remove-Item -Path ./scripts -Force
            -Recurse }
            New-Item -ItemType directory -Path 'scripts' | Out-Null
            unzip -q -d 'scripts' 'appcenter-build-assets-latest.zip'
            Invoke-Expression 'bash ./scripts/init.sh'
          failOnStderr: true
      - task: UseNode@1
        inputs:
          version: 18.x
      - task: CmdLine@1
        displayName: yarn/npm install
        inputs:
          filename: sh
          arguments: >-
            -c "if [ -f yarn.lock ]; then { yarn install
            --network-timeout=600000 && yarn list --depth=0; } else npm install;
            fi"
      - task: ShellScript@2
        displayName: Pre Build Script
        inputs:
          scriptPath: appcenter-pre-build.sh
      - task: CmdLine@2
        displayName: Run Jetify
        inputs:
          script: |
            if [ -f node_modules/jetifier/bin/jetify ]; then
                node node_modules/jetifier/bin/jetify
            else
                echo "Warning: node_modules/jetifier/bin/jetify does not exist"
                echo "         source code will not be upgraded to AndroidX"
            fi    
          failOnStderr: true
      - task: Bash@3
        displayName: Tag build
        inputs:
          filePath: $(Agent.HomeDirectory)/scripts/emit-tags.sh
          arguments: $(sonoma.tags)
      - task: Bash@3
        displayName: Install Android keystore
        inputs:
          filePath: $(Agent.HomeDirectory)/scripts/install-keystore.sh
          arguments: $(keystoreEncoded)
      - task: Gradle@1
        displayName: Gradle Task
        inputs:
          wrapperScript: android/gradlew
          tasks: 'clean :app:assembleRelease :app:bundleRelease '
          options: >-
            -DAPPCENTER_KEYSTORE_PASSWORD="$(keystorePassword)"
            -DMOBILECENTER_KEYSTORE_PASSWORD="$(keystorePassword)"
            -DAPPCENTER_KEYSTORE_FILE_ID="$(keystoreFilename)"
            -DMOBILECENTER_KEYSTORE_FILE_ID="$(keystoreFilename)"
            -DAPPCENTER_KEY_ALIAS="$(keyAlias)"
            -DMOBILECENTER_KEY_ALIAS="$(keyAlias)"
            -DAPPCENTER_KEY_PASSWORD="$(keyPassword)"
            -DMOBILECENTER_KEY_PASSWORD="$(keyPassword)" -p "android"
          jdkArchitecture: x86
          publishJUnitResults: false
          sqAnalysisBreakBuildIfQualityGateFailed: false
      - task: Bash@3
        name: appcenter_android_postprocess_output
        displayName: Android Postprocess
        inputs:
          filePath: $(Agent.HomeDirectory)/scripts/android-postprocess.sh
          arguments: $(build.sourcesdirectory)/android/app/build/outputs/apk
      - task: AndroidSigning@3
        displayName: Sign APK
        inputs:
          files: $(build.sourcesdirectory)/android/app/build/**/*.apk
          keystoreFile: $(keystoreSecureFileId)
          keystorePass: $(keystorePassword)
          keystoreAlias: $(keyAlias)
          keyPass: $(keyPassword)
          apksignerArguments: '-verbose'
      - task: AndroidSigning@1
        displayName: Sign Android App Bundle
        inputs:
          files: $(build.sourcesdirectory)/android/app/build/**/*.aab
          keystoreFile: .certs/keystore.jks
          keystorePass: $(keystorePassword)
          keystoreAlias: $(keyAlias)
          keyPass: $(keyPassword)
          jarsignerArguments: '-verbose -sigalg SHA256withRSA -digestalg SHA-256'
      - task: CopyFiles@2
        displayName: Copy build files to staging
        inputs:
          SourceFolder: $(build.sourcesdirectory)/android/app/build/outputs
          Contents: apk/**/*.apk
          TargetFolder: $(build.artifactstagingdirectory)/build
          OverWrite: true
          flattenFolders: true
      - task: CopyFiles@2
        displayName: Copy bundle files to staging
        inputs:
          SourceFolder: $(build.sourcesdirectory)/android/app/build/outputs
          Contents: bundle/**/*.aab
          TargetFolder: $(build.artifactstagingdirectory)/bundle
          OverWrite: true
          flattenFolders: true
      - task: CopyFiles@2
        displayName: Copy mapping files to staging
        inputs:
          SourceFolder: $(build.sourcesdirectory)/android/app/build/outputs
          Contents: mapping/**/mapping.txt
          TargetFolder: $(build.artifactstagingdirectory)/mapping
          OverWrite: true
          flattenFolders: true
      - task: PublishBuildArtifacts@1
        displayName: Publish build
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/build
          ArtifactName: build
      - task: PublishBuildArtifacts@1
        displayName: Publish bundle
        continueOnError: true
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/bundle
          ArtifactName: bundle
      - task: PublishBuildArtifacts@1
        displayName: Publish mapping
        condition: >-
          and(succeeded(),
          startsWith(variables['appcenter_android_postprocess_output.mapping'],
          true))
        continueOnError: true
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/mapping
          ArtifactName: mapping
      - task: AppCenterDistribute@3
        displayName: Create distribution
        condition: 'and(succeeded(), ne(variables[''Build.Reason''], ''pullRequest''))'
        inputs:
          serverEndpoint: <your-server-endpoint>
          appSlug: <your-app-slug>
          destinationType: store
          destinationStoreId: <your-store-id>
          isSilent: false
          releaseNotesInput: $(lastCommitMessage)
          app: $(build.artifactstagingdirectory)/bundle/**/*.aab
          symbolsType: Android
          mappingTxtPath: $(build.artifactstagingdirectory)/mapping/**/mapping.txt
          nativeLibrariesPath: $(build.sourcesdirectory)/**/*.so
